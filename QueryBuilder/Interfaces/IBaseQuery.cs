using System;
using System.Collections.Generic;
using SqlKata.Interfaces;

namespace SqlKata
{
    public interface IBaseQuery<Q> where Q : IBaseQuery<Q>
    {
        List<AbstractClause> Clauses { get; set; }
        string EngineScope { get; set; }

        Q AddComponent(string component, AbstractClause clause, string engineCode = null);
        Q ClearComponent(string component, string engineCode = null);
        Q Clone();
        Q From(Func<IQuery, IQuery> callback, string alias = null);
        Q From(IQuery query, string alias = null);
        Q From(string table);
        Q FromRaw(string expression, params object[] bindings);
        List<AbstractClause> GetComponents(string component, string engineCode = null);
        List<C> GetComponents<C>(string component, string engineCode = null) where C : AbstractClause;
        AbstractClause GetOneComponent(string component, string engineCode = null);
        C GetOneComponent<C>(string component, string engineCode = null) where C : AbstractClause;
        bool HasComponent(string component, string engineCode = null);
        Q NewChild();
        Q NewQuery();
        Q Not(bool flag = true);
        Q Or();
        Q OrWhere(Func<Q, Q> callback);
        Q OrWhere(string column, object value);
        Q OrWhere(string column, string op, Func<IQuery, IQuery> callback);
        Q OrWhere(string column, string op, IQuery query);
        Q OrWhere(string column, string op, object value);
        Q OrWhereBetween<T>(string column, T lower, T higher);
        Q OrWhereColumns(string first, string op, string second);
        Q OrWhereContains(string column, string value, bool caseSensitive = false);
        Q OrWhereDate(string column, object value);
        Q OrWhereDate(string column, string op, object value);
        Q OrWhereDatePart(string part, string column, object value);
        Q OrWhereDatePart(string part, string column, string op, object value);
        Q OrWhereEnds(string column, string value, bool caseSensitive = false);
        Q OrWhereExists(Func<IQuery, IQuery> callback);
        Q OrWhereExists(IQuery query);
        Q OrWhereFalse(string column);
        Q OrWhereIn(string column, Func<IQuery, IQuery> callback);
        Q OrWhereIn(string column, IQuery query);
        Q OrWhereIn<T>(string column, IEnumerable<T> values);
        Q OrWhereLike(string column, string value, bool caseSensitive = false);
        Q OrWhereNot(Func<Q, Q> callback);
        Q OrWhereNot(string column, object value);
        Q OrWhereNot(string column, string op, object value);
        Q OrWhereNotBetween<T>(string column, T lower, T higher);
        Q OrWhereNotContains(string column, string value, bool caseSensitive = false);
        Q OrWhereNotDate(string column, object value);
        Q OrWhereNotDate(string column, string op, object value);
        Q OrWhereNotDatePart(string part, string column, object value);
        Q OrWhereNotDatePart(string part, string column, string op, object value);
        Q OrWhereNotEnds(string column, string value, bool caseSensitive = false);
        Q OrWhereNotExists(Func<IQuery, IQuery> callback);
        Q OrWhereNotExists(IQuery query);
        Q OrWhereNotIn(string column, Func<IQuery, IQuery> callback);
        Q OrWhereNotIn(string column, IQuery query);
        Q OrWhereNotIn<T>(string column, IEnumerable<T> values);
        Q OrWhereNotLike(string column, string value, bool caseSensitive = false);
        Q OrWhereNotNull(string column);
        Q OrWhereNotStarts(string column, string value, bool caseSensitive = false);
        Q OrWhereNotTime(string column, object value);
        Q OrWhereNotTime(string column, string op, object value);
        Q OrWhereNull(string column);
        Q OrWhereRaw(string sql, params object[] bindings);
        Q OrWhereStarts(string column, string value, bool caseSensitive = false);
        Q OrWhereTime(string column, object value);
        Q OrWhereTime(string column, string op, object value);
        Q OrWhereTrue(string column);
        Q SetEngineScope(string engine);
        Q SetParent(AbstractQuery parent);
        Q Where(Func<Q, Q> callback);
        Q Where(IReadOnlyDictionary<string, object> values);
        Q Where(object constraints);
        Q Where(string column, object value);
        Q Where(string column, string op, Func<Q, Q> callback);
        Q Where(string column, string op, IQuery query);
        Q Where(string column, string op, object value);
        Q WhereBetween<T>(string column, T lower, T higher);
        Q WhereColumns(string first, string op, string second);
        Q WhereContains(string column, string value, bool caseSensitive = false);
        Q WhereDate(string column, object value);
        Q WhereDate(string column, string op, object value);
        Q WhereDatePart(string part, string column, object value);
        Q WhereDatePart(string part, string column, string op, object value);
        Q WhereEnds(string column, string value, bool caseSensitive = false);
        Q WhereExists(Func<IQuery, IQuery> callback);
        Q WhereExists(IQuery query);
        Q WhereFalse(string column);
        Q WhereIn(string column, Func<IQuery, IQuery> callback);
        Q WhereIn(string column, IQuery query);
        Q WhereIn<T>(string column, IEnumerable<T> values);
        Q WhereLike(string column, string value, bool caseSensitive = false);
        Q WhereNot(Func<Q, Q> callback);
        Q WhereNot(string column, object value);
        Q WhereNot(string column, string op, object value);
        Q WhereNotBetween<T>(string column, T lower, T higher);
        Q WhereNotContains(string column, string value, bool caseSensitive = false);
        Q WhereNotDate(string column, object value);
        Q WhereNotDate(string column, string op, object value);
        Q WhereNotDatePart(string part, string column, object value);
        Q WhereNotDatePart(string part, string column, string op, object value);
        Q WhereNotEnds(string column, string value, bool caseSensitive = false);
        Q WhereNotExists(Func<IQuery, IQuery> callback);
        Q WhereNotExists(IQuery query);
        Q WhereNotIn(string column, Func<IQuery, IQuery> callback);
        Q WhereNotIn(string column, IQuery query);
        Q WhereNotIn<T>(string column, IEnumerable<T> values);
        Q WhereNotLike(string column, string value, bool caseSensitive = false);
        Q WhereNotNull(string column);
        Q WhereNotStarts(string column, string value, bool caseSensitive = false);
        Q WhereNotTime(string column, object value);
        Q WhereNotTime(string column, string op, object value);
        Q WhereNull(string column);
        Q WhereRaw(string sql, params object[] bindings);
        Q WhereStarts(string column, string value, bool caseSensitive = false);
        Q WhereTime(string column, object value);
        Q WhereTime(string column, string op, object value);
        Q WhereTrue(string column);
    }
}