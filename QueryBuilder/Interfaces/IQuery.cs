using System;
using System.Collections.Generic;

namespace SqlKata.Interfaces
{
    public interface IQuery: IBaseQuery<IQuery>
    {
        bool IsDistinct { get; set; }
        string Method { get; set; }
        string QueryAlias { get; set; }

        IQuery As(string alias);
        IQuery AsAggregate(string type, params string[] columns);
        IQuery AsAverage(string column);
        IQuery AsAvg(string column);
        IQuery AsCount(params string[] columns);
        IQuery AsDelete();
        IQuery AsInsert(IEnumerable<string> columns, IEnumerable<IEnumerable<object>> valuesCollection);
        IQuery AsInsert(IEnumerable<string> columns, IEnumerable<object> values);
        IQuery AsInsert(IEnumerable<string> columns, IQuery query);
        IQuery AsInsert(IReadOnlyDictionary<string, object> data);
        IQuery AsInsert(object data);
        IQuery AsMax(string column);
        IQuery AsMin(string column);
        IQuery AsSum(string column);
        IQuery AsUpdate(IEnumerable<string> columns, IEnumerable<object> values);
        IQuery AsUpdate(IReadOnlyDictionary<string, object> data);
        IQuery AsUpdate(object data);
        IQuery Combine(string operation, bool all, IQuery query);
        IQuery CombineRaw(string sql, params object[] bindings);
        IQuery CrossJoin(string table);
        IQuery Distinct();
        IQuery Except(Func<IQuery, IQuery> callback, bool all = false);
        IQuery Except(IQuery query, bool all = false);
        IQuery ExceptAll(Func<IQuery, IQuery> callback);
        IQuery ExceptAll(IQuery query);
        IQuery ExceptRaw(string sql, params object[] bindings);
        IQuery For(string engine, Func<IQuery, IQuery> fn);
        IQuery ForPage(int page, int perPage = 15);
        IQuery GroupBy(params string[] columns);
        IQuery GroupByRaw(string expression, params object[] bindings);
        bool HasLimit(string engineCode = null);
        int GetOffset(string engineCode = null);
        int GetLimit(string engineCode = null);
        bool HasOffset(string engineCode = null);
        IQuery Having(Func<IQuery, IQuery> callback);
        IQuery Having(IReadOnlyDictionary<string, object> values);
        IQuery Having(object constraints);
        IQuery Having(string column, object value);
        IQuery Having(string column, string op, Func<IQuery, IQuery> callback);
        IQuery Having(string column, string op, object value);
        IQuery Having(string column, string op, IQuery query);
        IQuery HavingBetween<T>(string column, T lower, T higher);
        IQuery HavingColumns(string first, string op, string second);
        IQuery HavingContains(string column, string value, bool caseSensitive = false);
        IQuery HavingDate(string column, object value);
        IQuery HavingDate(string column, string op, object value);
        IQuery HavingDatePart(string part, string column, object value);
        IQuery HavingDatePart(string part, string column, string op, object value);
        IQuery HavingEnds(string column, string value, bool caseSensitive = false);
        IQuery HavingExists(Func<IQuery, IQuery> callback);
        IQuery HavingExists(IQuery query);
        IQuery HavingFalse(string column);
        IQuery HavingIn(string column, Func<IQuery, IQuery> callback);
        IQuery HavingIn(string column, IQuery query);
        IQuery HavingIn<T>(string column, IEnumerable<T> values);
        IQuery HavingLike(string column, string value, bool caseSensitive = false);
        IQuery HavingNot(Func<IQuery, IQuery> callback);
        IQuery HavingNot(string column, object value);
        IQuery HavingNot(string column, string op, object value);
        IQuery HavingNotBetween<T>(string column, T lower, T higher);
        IQuery HavingNotContains(string column, string value, bool caseSensitive = false);
        IQuery HavingNotDate(string column, object value);
        IQuery HavingNotDate(string column, string op, object value);
        IQuery HavingNotDatePart(string part, string column, object value);
        IQuery HavingNotDatePart(string part, string column, string op, object value);
        IQuery HavingNotEnds(string column, string value, bool caseSensitive = false);
        IQuery HavingNotExists(Func<IQuery, IQuery> callback);
        IQuery HavingNotExists(IQuery query);
        IQuery HavingNotIn(string column, Func<IQuery, IQuery> callback);
        IQuery HavingNotIn(string column, IQuery query);
        IQuery HavingNotIn<T>(string column, IEnumerable<T> values);
        IQuery HavingNotLike(string column, string value, bool caseSensitive = false);
        IQuery HavingNotNull(string column);
        IQuery HavingNotStarts(string column, string value, bool caseSensitive = false);
        IQuery HavingNotTime(string column, object value);
        IQuery HavingNotTime(string column, string op, object value);
        IQuery HavingNull(string column);
        IQuery HavingRaw(string sql, params object[] bindings);
        IQuery HavingStarts(string column, string value, bool caseSensitive = false);
        IQuery HavingTime(string column, object value);
        IQuery HavingTime(string column, string op, object value);
        IQuery HavingTrue(string column);
        IQuery Intersect(Func<IQuery, IQuery> callback, bool all = false);
        IQuery Intersect(IQuery query, bool all = false);
        IQuery IntersectAll(Func<IQuery, IQuery> callback);
        IQuery IntersectAll(IQuery query);
        IQuery IntersectRaw(string sql, params object[] bindings);
        IQuery Join(IQuery query, Func<Join, Join> onCallback, string type = "inner join");
        IQuery Join(string table, Func<Join, Join> callback, string type = "inner join");
        IQuery Join(string table, string first, string second, string op = "=", string type = "inner join");
        IQuery LeftJoin(IQuery query, Func<Join, Join> onCallback);
        IQuery LeftJoin(string table, Func<Join, Join> callback);
        IQuery LeftJoin(string table, string first, string second, string op = "=");
        IQuery Limit(int value);
        IQuery Offset(int value);
        IQuery OrderBy(params string[] columns);
        IQuery OrderByDesc(params string[] columns);
        IQuery OrderByRandom(string seed);
        IQuery OrderByRaw(string expression, params object[] bindings);
        IQuery OrHaving(Func<IQuery, IQuery> callback);
        IQuery OrHaving(string column, object value);
        IQuery OrHaving(string column, string op, Func<IQuery, IQuery> callback);
        IQuery OrHaving(string column, string op, object value);
        IQuery OrHaving(string column, string op, IQuery query);
        IQuery OrHavingBetween<T>(string column, T lower, T higher);
        IQuery OrHavingColumns(string first, string op, string second);
        IQuery OrHavingContains(string column, string value, bool caseSensitive = false);
        IQuery OrHavingDate(string column, object value);
        IQuery OrHavingDate(string column, string op, object value);
        IQuery OrHavingDatePart(string part, string column, object value);
        IQuery OrHavingDatePart(string part, string column, string op, object value);
        IQuery OrHavingEnds(string column, string value, bool caseSensitive = false);
        IQuery OrHavingExists(Func<IQuery, IQuery> callback);
        IQuery OrHavingExists(IQuery query);
        IQuery OrHavingFalse(string column);
        IQuery OrHavingIn(string column, Func<IQuery, IQuery> callback);
        IQuery OrHavingIn(string column, IQuery query);
        IQuery OrHavingIn<T>(string column, IEnumerable<T> values);
        IQuery OrHavingLike(string column, string value, bool caseSensitive = false);
        IQuery OrHavingNot(Func<IQuery, IQuery> callback);
        IQuery OrHavingNot(string column, object value);
        IQuery OrHavingNot(string column, string op, object value);
        IQuery OrHavingNotBetween<T>(string column, T lower, T higher);
        IQuery OrHavingNotContains(string column, string value, bool caseSensitive = false);
        IQuery OrHavingNotDate(string column, object value);
        IQuery OrHavingNotDate(string column, string op, object value);
        IQuery OrHavingNotDatePart(string part, string column, object value);
        IQuery OrHavingNotDatePart(string part, string column, string op, object value);
        IQuery OrHavingNotEnds(string column, string value, bool caseSensitive = false);
        IQuery OrHavingNotExists(Func<IQuery, IQuery> callback);
        IQuery OrHavingNotExists(IQuery query);
        IQuery OrHavingNotIn(string column, Func<IQuery, IQuery> callback);
        IQuery OrHavingNotIn(string column, IQuery query);
        IQuery OrHavingNotIn<T>(string column, IEnumerable<T> values);
        IQuery OrHavingNotLike(string column, string value, bool caseSensitive = false);
        IQuery OrHavingNotNull(string column);
        IQuery OrHavingNotStarts(string column, string value, bool caseSensitive = false);
        IQuery OrHavingNotTime(string column, object value);
        IQuery OrHavingNotTime(string column, string op, object value);
        IQuery OrHavingNull(string column);
        IQuery OrHavingRaw(string sql, params object[] bindings);
        IQuery OrHavingStarts(string column, string value, bool caseSensitive = false);
        IQuery OrHavingTime(string column, object value);
        IQuery OrHavingTime(string column, string op, object value);
        IQuery OrHavingTrue(string column);
        IQuery RightJoin(IQuery query, Func<Join, Join> onCallback);
        IQuery RightJoin(string table, Func<Join, Join> callback);
        IQuery RightJoin(string table, string first, string second, string op = "=");
        IQuery Select(Func<IQuery, IQuery> callback, string alias);
        IQuery Select(params string[] columns);
        IQuery Select(IQuery query, string alias);
        IQuery SelectRaw(string expression, params object[] bindings);
        IQuery Skip(int offset);
        IQuery Take(int limit);
        IQuery Union(Func<IQuery, IQuery> callback, bool all = false);
        IQuery Union(IQuery query, bool all = false);
        IQuery UnionAll(Func<IQuery, IQuery> callback);
        IQuery UnionAll(IQuery query);
        IQuery UnionRaw(string sql, params object[] bindings);
        IQuery When(bool condition, Func<IQuery, IQuery> callback);
        IQuery WhenNot(bool condition, Func<IQuery, IQuery> callback);
        IQuery With(Func<IQuery, IQuery> fn);
        IQuery With(IQuery query);
        IQuery With(string alias, Func<IQuery, IQuery> fn);
        IQuery With(string alias, IQuery query);
        IQuery WithRaw(string alias, string sql, params object[] bindings);
    }
}